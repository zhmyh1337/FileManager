<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="quiteQuite" xml:space="preserve">
    <value>Suppresses summary message and stops executing after the command completes.</value>
  </data>
  <data name="cmdDisk" xml:space="preserve">
    <value>This command changes the disk if specified, otherwise displays the list of all disks.</value>
  </data>
  <data name="diskDisk" xml:space="preserve">
    <value>Disk to set (either its ID or name).</value>
  </data>
  <data name="errDiskInvalidName" xml:space="preserve">
    <value>Unable to find the disk with name "{0}".</value>
  </data>
  <data name="errDiskInvalidNumber" xml:space="preserve">
    <value>Unable to find the disk with number {0}.</value>
  </data>
  <data name="errTerminalVersionAsOption" xml:space="preserve">
    <value>"--version" option is invalid in this context.</value>
  </data>
  <data name="errTerminalBadCommand" xml:space="preserve">
    <value>Command "{0}" is not recognized. Use "help" command.</value>
  </data>
  <data name="cdDir" xml:space="preserve">
    <value>Directory to change.</value>
  </data>
  <data name="cmdCd" xml:space="preserve">
    <value>This command changes the working directory.</value>
  </data>
  <data name="errCommonDirNotExists" xml:space="preserve">
    <value>This directory doesn't exist.</value>
  </data>
  <data name="cmdDir" xml:space="preserve">
    <value>This command scans directory for files and/or directories.</value>
  </data>
  <data name="cmdPrint" xml:space="preserve">
    <value>This command prints content of one (or more files) to console with default (or specified) encoding.</value>
  </data>
  <data name="dirDir" xml:space="preserve">
    <value>Directory to scan (optional).</value>
  </data>
  <data name="dirDirectories" xml:space="preserve">
    <value>Directories:</value>
  </data>
  <data name="dirFiles" xml:space="preserve">
    <value>Files:</value>
  </data>
  <data name="dirHideDirs" xml:space="preserve">
    <value>Hide directories.</value>
  </data>
  <data name="dirHideFiles" xml:space="preserve">
    <value>Hide files.</value>
  </data>
  <data name="errCommonFileNotExists" xml:space="preserve">
    <value>File "{0}" doesn't exist.</value>
  </data>
  <data name="printFiles" xml:space="preserve">
    <value>Files to print.</value>
  </data>
  <data name="cmdColor" xml:space="preserve">
    <value>This command changes the foreground color of the console (or, if not specified, shows all console colors).</value>
  </data>
  <data name="cmdCopy" xml:space="preserve">
    <value>This command copies file from one place to another (and overwrites the old file it if specified).</value>
  </data>
  <data name="cmdDelFile" xml:space="preserve">
    <value>This command deletes a file.</value>
  </data>
  <data name="cmdMove" xml:space="preserve">
    <value>This command moves file from one place to another (and overwrites the old file it if specified).</value>
  </data>
  <data name="cmdWriteFile" xml:space="preserve">
    <value>This command creates a new file (or rewrites an existing one if the overwrite option was specified) and fills it with content in some encoding if specified.</value>
  </data>
  <data name="colorColor" xml:space="preserve">
    <value>Color to specify (optional).</value>
  </data>
  <data name="copyFrom" xml:space="preserve">
    <value>Copy from file path.</value>
  </data>
  <data name="commonFileOverwrite" xml:space="preserve">
    <value>Whether to overwrite the file if it exists.</value>
  </data>
  <data name="copyTo" xml:space="preserve">
    <value>Copy to file path.</value>
  </data>
  <data name="delFileFile" xml:space="preserve">
    <value>File to delete.</value>
  </data>
  <data name="errColorBounds" xml:space="preserve">
    <value>Color {0} is out of bounds.</value>
  </data>
  <data name="errCommonFileExists" xml:space="preserve">
    <value>File "{0}" exists.</value>
  </data>
  <data name="moveFrom" xml:space="preserve">
    <value>Move from file path.</value>
  </data>
  <data name="moveTo" xml:space="preserve">
    <value>Move to file path.</value>
  </data>
  <data name="commonEncoding" xml:space="preserve">
    <value>Encoding (either Default, UTF8, ASCII or Unicode).</value>
  </data>
  <data name="writeFileFile" xml:space="preserve">
    <value>File to create (rewrite).</value>
  </data>
  <data name="writeFileLines" xml:space="preserve">
    <value>Lines to write to a new (existing) file.</value>
  </data>
  <data name="debuggerPrefix" xml:space="preserve">
    <value>[DEBUG]</value>
  </data>
  <data name="loggerErrorPrefix" xml:space="preserve">
    <value>[ERROR]</value>
  </data>
  <data name="loggerSuccessPrefix" xml:space="preserve">
    <value>[SUCCESS]</value>
  </data>
  <data name="exampleAdvanced" xml:space="preserve">
    <value>advanced scenario</value>
  </data>
  <data name="exampleCommon" xml:space="preserve">
    <value>common scenario</value>
  </data>
  <data name="exampleMultiline" xml:space="preserve">
    <value>multiline scenario</value>
  </data>
  <data name="cmdExit" xml:space="preserve">
    <value>This command terminates the program.</value>
  </data>
  <data name="colorReset" xml:space="preserve">
    <value>Reset color to default.</value>
  </data>
  <data name="cmdClear" xml:space="preserve">
    <value>This command clears the console.</value>
  </data>
  <data name="cmdMkdir" xml:space="preserve">
    <value>This command creates a directory with the specified path.</value>
  </data>
  <data name="cmdRmdir" xml:space="preserve">
    <value>This command removes the directory with the specified path.</value>
  </data>
  <data name="errCommonDirExists" xml:space="preserve">
    <value>This directory already exists.</value>
  </data>
  <data name="mkdirDir" xml:space="preserve">
    <value>Directory to create.</value>
  </data>
  <data name="rmdirDir" xml:space="preserve">
    <value>Directory to remove.</value>
  </data>
</root>